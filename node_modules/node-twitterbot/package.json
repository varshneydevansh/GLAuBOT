{
  "_from": "node-twitterbot",
  "_id": "node-twitterbot@0.2.2",
  "_inBundle": false,
  "_integrity": "sha1-FF1TI3V+9qOARDzqwRdjtUoJ1Yg=",
  "_location": "/node-twitterbot",
  "_phantomChildren": {
    "oauth": "0.9.9"
  },
  "_requested": {
    "escapedName": "node-twitterbot",
    "fetchSpec": "latest",
    "name": "node-twitterbot",
    "raw": "node-twitterbot",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-twitterbot/-/node-twitterbot-0.2.2.tgz",
  "_shasum": "145d5323757ef6a380443ceac11763b54a09d588",
  "_spec": "node-twitterbot",
  "_where": "C:\\Users\\Devansh Varsheny\\glabot",
  "author": {
    "email": "nate@projectspong.com",
    "name": "Nathaniel Kirby",
    "url": "http://www.projectspong.com"
  },
  "bugs": {
    "email": "nate@projectspong.com",
    "url": "https://github.com/nkirby/node-twitterbot/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "twit": "~1.1.11"
  },
  "deprecated": false,
  "description": "A NodeJS module for creating Twitter Bots",
  "devDependencies": {
    "grunt": "~0.4.2",
    "grunt-banner": "~0.2.0",
    "grunt-contrib-coffee": "~0.8.2",
    "grunt-contrib-watch": "~0.5.3"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "http://www.projectspong.com/portfolio-type/nodebitlyapi/",
  "keywords": [
    "bot",
    "twitter"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/nkirby/node-twitterbot/blob/master/LICENSE"
    }
  ],
  "main": "lib/twitterbot.js",
  "name": "node-twitterbot",
  "optionalDependencies": {},
  "readme": "# node-twitterbot\n\nA simple way to build Twitter Bots using NodeJS, NPM and a handful of modules\n\n## Installation\n\n    npm install node-twitterbot\n\n### Status\n\nThis should be considered a work in progress. It ought to work for you, but if not, please let me know.\n\n### Dependencies\n\nnode-twitterbot handles it's own dependencies for you. It primarily uses:\n\n[Twit](https://github.com/ttezel/twit/ \"Twit on Github\")\n  \n## Usage\n\n    var TwitterBot = require(\"node-twitterbot\").TwitterBot\n\nAfter that, the TwitterBot constructor either needs an object containing the configuration for the Twitter Bot\n\n    var Bot = new TwitterBot({\n      \"consumer_secret\": \"consumer_secret\",\n\t    \"consumer_key\": \"consumer_key\",\n    \t\"access_token\": \"access_token\",\n\t    \"access_token_secret\": \"access_token_secret\"\n\t  });\n\t  \n... or a path to a config JSON file.\n\n    var Bot = new TwitterBot(\"path-to-config.json\");\n  \nSee more about the [TwitterBot class here](https://github.com/nkirby/node-twitterbot/wiki/TwitterBot \"TwitterBot Wiki\")\n\n## Actions\n\nIn order to get your node-twitterbot to actually do something, you need to define actions. It is done through the addAction() method. It takes 2 parameters:\n\n    actionName: a string value for the name of an action\n  \tactionFunction: a function to be called when a given action is scheduled. (See below for method signature)\n\nSo our addAction method might look like this:\n\n    Bot.addAction(\"tweet\", function(twitter, action, tweet) {\n      Bot.tweet(\"I'm posting a tweet!\");\n    });\n    \nThe twitter variable passed into the function is the [Twit](https://github.com/ttezel/twit/ \"Twit on Github\") object associated with a given node-twitterbot, and can be managed directly. The same Twit object is available as [TwitterBot].twitter as well.\n\nThe action variable passed into the function is the TwitterBotAction created by addAction.\n\nAnd the tweet object is the tweet passed into the action (if there was one)\n\n### TwitterBotActions\n\naddAction() returns a TwitterBotAction object. \n\n    var tweetAction = Bot.addAction(\"tweet\", function(twitter, action, tweet) {\n      Bot.tweet(\"I'm posting a tweet!\");\n    });\n\nBut you will rarely need to directly hold onto the tweetAction directly. You can always get a reference to the action by calling\n\n    Bot.actionWithName(\"tweet\");\n\nWhich will return the TwitterBotAction object, or null if the name is invalid (or the action already removed)\n\nSee more about the [TwitterBotAction class here](https://github.com/nkirby/node-twitterbot/wiki/TwitterBotAction \"TwitterBotAction Wiki\")\n\n### Grouping Actions\n\nActions are groupable by calling the TwitterBotAction objects group() method\n\n    Bot.addAction(\"tweet\", function(twitter, action, tweet) {\n      Bot.tweet(\"I'm posting a tweet!\");\n    }).group(\"tweet posting\");\n    \nRetrieving all actions in a group is possible via:\n\n    Bot.allActions(\"tweet posting\");\n    \nA TwitterBotAction can be part of multiple groups.\n\n### Randomizing Actions\n\nIf you create multiple actions for a given TwitterBot, you can get a random one back by calling\n\n    Bot.randomAction();\n  \nIf you want a random action in a group, you can pass in the group name\n\n    Bot.randomAction(\"group name\");\n    \n### Weighting Actions\n\nIf you want to make the randomAction function a little less random, you can give weights to all TwitterBotActions\n\n    Bot.addAction(\"tweet\", function(twitter, action, tweet) {\n      Bot.tweet(\"I'm posting a tweet!\");\n    }).group(\"tweet posting\").weight(10);\n\nYou can then get a random action, taking the action weights into account, by calling:\n    \n    Bot.randomWeightedAction(\"tweet posting\");\n    \n\n## Streaming\n\nIf you want to watch the Twitter timeline, you can use the built in TwitterBotStreamAction object. One is automatically provided for you as part of the TwitterBot.\n\n    Bot.listen(listenerName, listenerFunction, function(twitter, action, tweet) {\n      // Do something with the tweet\n    });\n    \nThe listenerName is a string that identifies the listener. The listenerFunction follows the following format:\n\n    listenerFunction = function(tweet) {\n      if (something)\n        return true;\n        \n      return false;\n    }\n    \nBy returning true, you'll tell the listen() function to execute the passed callback method.\n\nFor example:\n\n    Bot.listen(\"listening\", tweetThatContainsName, function(twitter, action, tweet) {\n      Bot.now(Bot.randomWeightedAction(\"reply actions\"), tweet);\n    });\n\nWould cause our TwitterBot to perform some random action in the \"reply actions\" group, whenever the tweetThatContainsName() function returns true.\n\nYou can create a TwitterBotStreamAction via:\n\n    var streamAction = new TwitterBotStreamAction(null, Bot)\n    \nThe first parameter of the TwitterBotStreamAction constructor is an action function which won't actually be called (inherited from the standard TwitterBotAction constructor), so you don't need to actually pass anything in.\n\nSee more about the [TwitterBotStreamAction class here](https://github.com/nkirby/node-twitterbot/wiki/TwitterBotStreamAction \"TwitterBotStreamAction\")\n\n## Scheduling\n\nIf you want to execute an action immediately, you can call the bot's now() function\n\n    Bot.now(\"action name\");\n    Bot.now(function(twitter) {\n    });\n    Bot.now(twitterBotAction);\n    \nThe now() function takes either an actionName identifier, a function with the same signaure as a TwitterBotAction, or an actual TwitterBotAction object\n\nYou can schedule actions into the future by calling\n\n    Bot.schedule(\"action name\", 1000);\n    \nWould cause the Bot's \"action name\" action to be called after 1000 ms (same as setTimeout)\n\n### Rescheduling\n\nSince the second parameter passed into the TwitterBotAction's method is the TwitterBotAction itself, you can call this:\n\n    var tweetAction = Bot.addAction(\"tweet\", function(twitter, action, tweet) {\n      Bot.tweet(\"I'm posting a tweet!\");\n      action.schedule(1000);\n    });\n\nWhich would cause the same action to be executed in 1000 ms\n\n## Credits & Such\n\nThis project was created by Nathaniel Kirby\n\n[nate@projectspong.com](mailto:nate@projectspong.com \"nate@projectspong.com\")\n\n[@thenatekirby](http://twitter.com/thenatekirby \"Nate Kirby on Twitter\")\n\nUse it at your own risk. Do not do stupid things with the Twitter API. It's called abuse, and if you use this code to spam people, you're\na jackass.\n\nSpecial thanks to all the developers whose modules are used to build node-twitterbot. Thanks to the NPM and NodeJS teams as well.\n\nAnd above all else, thanks to Twitter for providing me an output for these shenanigans.\n\n### License\n\nThis software is provided via the MIT License.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nkirbygr/node-twitterbot.git"
  },
  "version": "0.2.2"
}
